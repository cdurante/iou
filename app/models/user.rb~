class User < ActiveRecord::Base
  has_many :friendships
  has_many :friends, :through => :friendships
  has_many :inverse_friendships, :class_name => "Friendship", :foreign_key => "friend_id"
  has_many :inverse_friends, :through => :inverse_friendships, :source => :user

  has_many :transactions
  has_many :collections, :through => :transactions
  has_many :inverse_transactions, :class_name => "Transaction", :foreign_key => "debtor_id"
  has_many :debts, :through => :inverse_transactions, :source => :user

  before_save { self.email = email.downcase }
  before_create :create_remember_token
  has_secure_password
  before_save { self.email.downcase! }
  validates :name, presence: true, length: { maximum: 50 }
 VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-]+(?:\.[a-z\d\-]+)*\.[a-z]+\z/i
  validates :email, presence: true, format: { with: VALID_EMAIL_REGEX },
                    uniqueness: { case_sensitive: false }
  validates :password, length: { minimum: 6 }
  def User.new_remember_token
    SecureRandom.urlsafe_base64
  end


  def transacting?(other_user, name)
    transactions.find_by(debtor_id: other_user.id,name: name)
  end

  def transact!(other_user, amount, name)
    transactions.create!(debtor_id: other_user.id, amount: 23.5, name: "New Transaction")
  end

  def settleup!(other_user, name)
    transactions.find_by(debtor_id: other_user.id, name: name).destroy
  end

  def User.hash(token)
    Digest::SHA1.hexdigest(token.to_s)
  end

  def friendswith?(user)
    !friendships.find_by(friend_id: user).nil? &&
     !current_user.inverse_friendships.find_by(:friend_id current_user, :user_id user).nil?
  end

  private

    def create_remember_token
      self.remember_token = User.hash(User.new_remember_token)
    end
end
